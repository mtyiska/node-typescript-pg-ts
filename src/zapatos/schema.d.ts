/*
** DON'T EDIT THIS FILE **
It's been generated by Zapatos (v5.0.2), and is liable to be overwritten

Zapatos: https://jawj.github.io/zapatos/
Copyright (C) 2020 - 2021 George MacKerron
Released under the MIT licence: see LICENCE file
*/

declare module 'zapatos/schema' {

  import type * as db from 'zapatos/db';

  // got a type error on schemaVersionCanary below? update by running `npx zapatos`
  export interface schemaVersionCanary extends db.SchemaVersionCanary { version: 103 }

  /* === schema: public === */

  /* --- enums --- */


  /* --- tables --- */

  /**
   * **jokes**
   * - Table in database
   */
  export namespace jokes {
    export type Table = 'jokes';
    export interface Selectable {
      /**
      * **jokes.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('jokes_id_seq'::regclass)`
      */
      id: db.Int8String;
      /**
      * **jokes.joke_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      joke_id: number;
      /**
      * **jokes.category**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      category: string;
      /**
      * **jokes.joke**
      * - `varchar` in database
      * - Nullable, no default
      */
      joke: string | null;
      /**
      * **jokes.setup**
      * - `varchar` in database
      * - Nullable, no default
      */
      setup: string | null;
      /**
      * **jokes.delivery**
      * - `varchar` in database
      * - Nullable, no default
      */
      delivery: string | null;
      /**
      * **jokes.rating**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      rating: number;
      /**
      * **jokes.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at: Date;
      /**
      * **jokes.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      updated_at: Date;
    }
    export interface JSONSelectable {
      /**
      * **jokes.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('jokes_id_seq'::regclass)`
      */
      id: number;
      /**
      * **jokes.joke_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      joke_id: number;
      /**
      * **jokes.category**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      category: string;
      /**
      * **jokes.joke**
      * - `varchar` in database
      * - Nullable, no default
      */
      joke: string | null;
      /**
      * **jokes.setup**
      * - `varchar` in database
      * - Nullable, no default
      */
      setup: string | null;
      /**
      * **jokes.delivery**
      * - `varchar` in database
      * - Nullable, no default
      */
      delivery: string | null;
      /**
      * **jokes.rating**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      rating: number;
      /**
      * **jokes.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at: db.TimestampTzString;
      /**
      * **jokes.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      updated_at: db.TimestampTzString;
    }
    export interface Whereable {
      /**
      * **jokes.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('jokes_id_seq'::regclass)`
      */
      id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **jokes.joke_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      joke_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **jokes.category**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      category?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **jokes.joke**
      * - `varchar` in database
      * - Nullable, no default
      */
      joke?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **jokes.setup**
      * - `varchar` in database
      * - Nullable, no default
      */
      setup?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **jokes.delivery**
      * - `varchar` in database
      * - Nullable, no default
      */
      delivery?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **jokes.rating**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      rating?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **jokes.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **jokes.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **jokes.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('jokes_id_seq'::regclass)`
      */
      id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment;
      /**
      * **jokes.joke_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      joke_id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **jokes.category**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      category: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **jokes.joke**
      * - `varchar` in database
      * - Nullable, no default
      */
      joke?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **jokes.setup**
      * - `varchar` in database
      * - Nullable, no default
      */
      setup?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **jokes.delivery**
      * - `varchar` in database
      * - Nullable, no default
      */
      delivery?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **jokes.rating**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      rating: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **jokes.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **jokes.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **jokes.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('jokes_id_seq'::regclass)`
      */
      id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment>;
      /**
      * **jokes.joke_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      joke_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **jokes.category**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      category?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **jokes.joke**
      * - `varchar` in database
      * - Nullable, no default
      */
      joke?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **jokes.setup**
      * - `varchar` in database
      * - Nullable, no default
      */
      setup?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **jokes.delivery**
      * - `varchar` in database
      * - Nullable, no default
      */
      delivery?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **jokes.rating**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      rating?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **jokes.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **jokes.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'jokes_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **restaurants**
   * - Table in database
   */
  export namespace restaurants {
    export type Table = 'restaurants';
    export interface Selectable {
      /**
      * **restaurants.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('restaurants_id_seq'::regclass)`
      */
      id: db.Int8String;
      /**
      * **restaurants.name**
      * - `varchar` in database
      * - Nullable, no default
      */
      name: string | null;
      /**
      * **restaurants.location**
      * - `varchar` in database
      * - Nullable, no default
      */
      location: string | null;
      /**
      * **restaurants.price_range**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      price_range: number;
    }
    export interface JSONSelectable {
      /**
      * **restaurants.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('restaurants_id_seq'::regclass)`
      */
      id: number;
      /**
      * **restaurants.name**
      * - `varchar` in database
      * - Nullable, no default
      */
      name: string | null;
      /**
      * **restaurants.location**
      * - `varchar` in database
      * - Nullable, no default
      */
      location: string | null;
      /**
      * **restaurants.price_range**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      price_range: number;
    }
    export interface Whereable {
      /**
      * **restaurants.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('restaurants_id_seq'::regclass)`
      */
      id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **restaurants.name**
      * - `varchar` in database
      * - Nullable, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **restaurants.location**
      * - `varchar` in database
      * - Nullable, no default
      */
      location?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **restaurants.price_range**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      price_range?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **restaurants.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('restaurants_id_seq'::regclass)`
      */
      id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment;
      /**
      * **restaurants.name**
      * - `varchar` in database
      * - Nullable, no default
      */
      name?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **restaurants.location**
      * - `varchar` in database
      * - Nullable, no default
      */
      location?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **restaurants.price_range**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      price_range: number | db.Parameter<number> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **restaurants.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('restaurants_id_seq'::regclass)`
      */
      id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment>;
      /**
      * **restaurants.name**
      * - `varchar` in database
      * - Nullable, no default
      */
      name?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **restaurants.location**
      * - `varchar` in database
      * - Nullable, no default
      */
      location?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **restaurants.price_range**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      price_range?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
    }
    export type UniqueIndex = 'restaurants_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **reviews**
   * - Table in database
   */
  export namespace reviews {
    export type Table = 'reviews';
    export interface Selectable {
      /**
      * **reviews.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('reviews_id_seq'::regclass)`
      */
      id: db.Int8String;
      /**
      * **reviews.restaurant_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      restaurant_id: db.Int8String;
      /**
      * **reviews.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **reviews.review**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      review: string;
      /**
      * **reviews.rating**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      rating: number;
    }
    export interface JSONSelectable {
      /**
      * **reviews.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('reviews_id_seq'::regclass)`
      */
      id: number;
      /**
      * **reviews.restaurant_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      restaurant_id: number;
      /**
      * **reviews.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **reviews.review**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      review: string;
      /**
      * **reviews.rating**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      rating: number;
    }
    export interface Whereable {
      /**
      * **reviews.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('reviews_id_seq'::regclass)`
      */
      id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **reviews.restaurant_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      restaurant_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **reviews.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **reviews.review**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      review?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **reviews.rating**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      rating?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **reviews.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('reviews_id_seq'::regclass)`
      */
      id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment;
      /**
      * **reviews.restaurant_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      restaurant_id: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
      /**
      * **reviews.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **reviews.review**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      review: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **reviews.rating**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      rating: number | db.Parameter<number> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **reviews.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('reviews_id_seq'::regclass)`
      */
      id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment>;
      /**
      * **reviews.restaurant_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      restaurant_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
      /**
      * **reviews.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **reviews.review**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      review?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **reviews.rating**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      rating?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
    }
    export type UniqueIndex = 'reviews_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **sessionusers**
   * - Table in database
   */
  export namespace sessionusers {
    export type Table = 'sessionusers';
    export interface Selectable {
      /**
      * **sessionusers.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('sessionusers_id_seq'::regclass)`
      */
      id: db.Int8String;
      /**
      * **sessionusers.email**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      email: string;
      /**
      * **sessionusers.password**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      password: string;
      /**
      * **sessionusers.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at: Date;
      /**
      * **sessionusers.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      updated_at: Date;
    }
    export interface JSONSelectable {
      /**
      * **sessionusers.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('sessionusers_id_seq'::regclass)`
      */
      id: number;
      /**
      * **sessionusers.email**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      email: string;
      /**
      * **sessionusers.password**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      password: string;
      /**
      * **sessionusers.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at: db.TimestampTzString;
      /**
      * **sessionusers.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      updated_at: db.TimestampTzString;
    }
    export interface Whereable {
      /**
      * **sessionusers.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('sessionusers_id_seq'::regclass)`
      */
      id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **sessionusers.email**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      email?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **sessionusers.password**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      password?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **sessionusers.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **sessionusers.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **sessionusers.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('sessionusers_id_seq'::regclass)`
      */
      id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment;
      /**
      * **sessionusers.email**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      email: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **sessionusers.password**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      password: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **sessionusers.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **sessionusers.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **sessionusers.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('sessionusers_id_seq'::regclass)`
      */
      id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment>;
      /**
      * **sessionusers.email**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      email?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **sessionusers.password**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      password?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **sessionusers.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **sessionusers.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'sessionusers_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /* === cross-table types === */

  export type Table = jokes.Table | restaurants.Table | reviews.Table | sessionusers.Table;
  export type Selectable = jokes.Selectable | restaurants.Selectable | reviews.Selectable | sessionusers.Selectable;
  export type JSONSelectable = jokes.JSONSelectable | restaurants.JSONSelectable | reviews.JSONSelectable | sessionusers.JSONSelectable;
  export type Whereable = jokes.Whereable | restaurants.Whereable | reviews.Whereable | sessionusers.Whereable;
  export type Insertable = jokes.Insertable | restaurants.Insertable | reviews.Insertable | sessionusers.Insertable;
  export type Updatable = jokes.Updatable | restaurants.Updatable | reviews.Updatable | sessionusers.Updatable;
  export type UniqueIndex = jokes.UniqueIndex | restaurants.UniqueIndex | reviews.UniqueIndex | sessionusers.UniqueIndex;
  export type Column = jokes.Column | restaurants.Column | reviews.Column | sessionusers.Column;
  export type AllBaseTables = [jokes.Table, restaurants.Table, reviews.Table, sessionusers.Table];
  export type AllForeignTables = [];
  export type AllViews = [];
  export type AllMaterializedViews = [];
  export type AllTablesAndViews = [jokes.Table, restaurants.Table, reviews.Table, sessionusers.Table];


  export type SelectableForTable<T extends Table> = {
    jokes: jokes.Selectable;
    restaurants: restaurants.Selectable;
    reviews: reviews.Selectable;
    sessionusers: sessionusers.Selectable;
  }[T];

  export type JSONSelectableForTable<T extends Table> = {
    jokes: jokes.JSONSelectable;
    restaurants: restaurants.JSONSelectable;
    reviews: reviews.JSONSelectable;
    sessionusers: sessionusers.JSONSelectable;
  }[T];

  export type WhereableForTable<T extends Table> = {
    jokes: jokes.Whereable;
    restaurants: restaurants.Whereable;
    reviews: reviews.Whereable;
    sessionusers: sessionusers.Whereable;
  }[T];

  export type InsertableForTable<T extends Table> = {
    jokes: jokes.Insertable;
    restaurants: restaurants.Insertable;
    reviews: reviews.Insertable;
    sessionusers: sessionusers.Insertable;
  }[T];

  export type UpdatableForTable<T extends Table> = {
    jokes: jokes.Updatable;
    restaurants: restaurants.Updatable;
    reviews: reviews.Updatable;
    sessionusers: sessionusers.Updatable;
  }[T];

  export type UniqueIndexForTable<T extends Table> = {
    jokes: jokes.UniqueIndex;
    restaurants: restaurants.UniqueIndex;
    reviews: reviews.UniqueIndex;
    sessionusers: sessionusers.UniqueIndex;
  }[T];

  export type ColumnForTable<T extends Table> = {
    jokes: jokes.Column;
    restaurants: restaurants.Column;
    reviews: reviews.Column;
    sessionusers: sessionusers.Column;
  }[T];

  export type SQLForTable<T extends Table> = {
    jokes: jokes.SQL;
    restaurants: restaurants.SQL;
    reviews: reviews.SQL;
    sessionusers: sessionusers.SQL;
  }[T];

}
